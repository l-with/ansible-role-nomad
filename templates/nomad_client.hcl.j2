client {
  enabled = true
{% if nomad_client.alloc_dir is defined %}
   alloc_dir = "{{ nomad_client.alloc_dir }}
{% endif %}
{% if nomad_client.alloc_mounts_dir is defined %}
  alloc_mounts_dir = "{{ nomad_client.alloc_mounts_dir }}
{% endif %}
{% if nomad_client.server_join is defined %}
  server_join {
    retroy_join = ["{{ nomad_client.server_join.retry_join | join('", "') }}"]
    # retry_interval
    # retry_max
    # start_join
  }  
{% endif %}
{% if nomad_client.state_dir is defined %}
  state_dir = "{{ nomad_client.state_dir }}
{% endif %}
  consul {
  {% if nomad_consul.address is defined %}
    address = "{{ nomad_consul.address }}"
  {% endif %}
  {% if nomad_consul.auth is defined %}
    auth = "{{ nomad_consul.auth }}"
  {% endif %}
  {% if nomad_consul.auto_advertise is defined %}
    auto_advertise = {{ nomad_consul.auto_advertise | bool | to_json }}
  {% endif %}
  {% if nomad_consul.checks_use_advertise is defined %}
    checks_use_advertise = {{ nomad_consul.checks_use_advertise | bool | to_json }}
  {% endif %}
    token = "{{ nomad_consul.token }}"
  {% if nomad_consul.ssl is defined %}
    ssl       = {{ nomad_consul.ssl | bool | to_json }}
    ca_file   = "{{ nomad_consul.ca_file }}"
    cert_file = "{{ nomad_consul.cert_file }}"
    key_file  = "{{ nomad_consul.key_file }}"
  {% endif %}
  }  
  # chroot_env
  # max_kill_timeout (string: "30s") - Specifies the maximum amount of time a job is allowed to wait to exit. Individual jobs may customize their own kill timeout, but it may not exceed this value.
  # disable_remote_exec (bool: false) - Specifies if the client should disable remote task execution to tasks running on this client.
  # meta (map[string]string: nil) - Specifies a key-value map that annotates with user-defined metadata.
  # network_interface (string: varied) - Specifies the name of the interface to force network fingerprinting on. When run in dev mode, this defaults to the loopback interface. When not in dev mode, the interface attached to the default route is used. The scheduler chooses from these fingerprinted IP addresses when allocating ports for tasks. This value support go-sockaddr/template format.
  #   If no non-local IP addresses are found, Nomad could fingerprint link-local IPv6 addresses depending on the client's "fingerprint.network.disallow_link_local" configuration value.
  # preferred_address_family (string: "") - Specifies the preferred address family for the network interface. The value can be ipv4 or ipv6. If the selected network interface has both IPv4 and IPv6 addresses, this option will select an IP address of the preferred family. When the option is not specified, the current behavior is conserved: the first IP address is selected no matter the family.
  # cpu_total_compute (int: 0) - Specifies an override for the total CPU compute. This value should be set to # Cores * Core MHz. For example, a quad-core running at 2 GHz would have a total compute of 8000 (4 * 2000). Most clients can determine their total CPU compute automatically, and thus in most cases this should be left unset.
  # memory_total_mb (int:0) - Specifies an override for the total memory. If set, this value overrides any detected memory.
  # disk_total_mb (int:0) - Specifies an override for the total disk space fingerprint attribute. This value is not used by the scheduler unless you have constraints set on the attribute unique.storage.bytestotal. The actual total disk space can be determined via the Read Stats API
  # disk_free_mb (int:0) - Specifies the disk space free for scheduling allocations. If set, this value overrides any detected free disk space. This value can be seen in nomad node status under Allocated Resources.
  # min_dynamic_port (int:20000) - Specifies the minimum dynamic port to be assigned. Individual ports and ranges of ports may be excluded from dynamic port assignment via reserved parameters.
  # max_dynamic_port (int:32000) - Specifies the maximum dynamic port to be assigned. Individual ports and ranges of ports may be excluded from dynamic port assignment via reserved parameters.
  # node_class (string: "") - Specifies an arbitrary string used to logically group client nodes by user-defined class. This value can be used during job placement as an affinity or constraint attribute and other places where variable interpolation is supported.
  # node_pool (string: "default") - Specifies the node pool in which the client is registered. If the node pool does not exist yet, it will be created automatically if the node registers in the authoritative region. In non-authoritative regions, the node is kept in the initializing status until the node pool is created and replicated.
  # options (Options: nil) - Specifies a key-value mapping of internal configuration for clients, such as for driver configuration.
  # reserved (Reserved: nil) - Specifies that Nomad should reserve a portion of the node's resources from receiving tasks. This can be used to target a certain capacity usage for the node. For example, a value equal to 20% of the node's CPU could be reserved to target a CPU utilization of 80%.
  # servers (array<string>: []) - Specifies an array of addresses to the Nomad servers this client should join. This list is used to register the client with the server nodes and advertise the available resources so that the agent can receive work. This may be specified as an IP address or DNS, with or without the port. If the port is omitted, the default port of 4647 is used. If you are specifying IPv6 addresses, they must be in URL format with brackets (ex. "[2001:db8::1]").
  # gc_interval (string: "1m") - Specifies the interval at which Nomad attempts to garbage collect terminal allocation directories.
  # gc_disk_usage_threshold (float: 80) - Specifies the disk usage percent which Nomad tries to maintain by garbage collecting terminal allocations.
  # gc_inode_usage_threshold (float: 70) - Specifies the inode usage percent which Nomad tries to maintain by garbage collecting terminal allocations.
  # gc_max_allocs (int: 50) - Specifies the maximum number of allocations which a client will track before triggering a garbage collection of terminal allocations. This will not limit the number of allocations a node can run at a time, however after gc_max_allocs every new allocation will cause terminal allocations to be GC'd.
  # gc_parallel_destroys (int: 2) - Specifies the maximum number of parallel destroys allowed by the garbage collector. This value should be relatively low to avoid high resource usage during garbage collections.
  # no_host_uuid (bool: true) - By default a random node UUID will be generated, but setting this to false will use the system's UUID.
  # cni_path (string: "/opt/cni/bin") - Sets the search path that is used for CNI plugin discovery. Multiple paths can be searched using colon delimited paths
  # cni_config_dir (string: "/opt/cni/config") - Sets the directory where CNI network configuration is located. The client will use this path when fingerprinting CNI networks. Filenames should use the .conflist extension. Filenames with the .conf or .json extensions are loaded as individual plugin configuration.
  # bridge_network_name (string: "nomad") - Sets the name of the bridge to be created by Nomad for allocations running with bridge networking mode on the client.
  # bridge_network_subnet (string: "172.26.64.0/20") - Specifies the subnet which the client will use to allocate IP addresses from.
  # bridge_network_hairpin_mode (bool: false) - Specifies if hairpin mode is enabled on the network bridge created by Nomad for allocations running with bridge networking mode on this client. You may use the corresponding node attribute nomad.bridge.hairpin_mode in constraints. When hairpin mode is enabled, allocations are able to reach their own IP and all ports bound to it. Changing this value requires a reboot of the client host to take effect.
  # artifact (Artifact: varied) - Specifies controls on the behavior of task artifact blocks.
  # template (Template: nil) - Specifies controls on the behavior of task template blocks.
  # host_volume (host_volume: nil) - Exposes paths from the host as volumes that can be mounted into jobs.
  # host_network (host_network: nil) - Registers additional host networks with the node that can be selected when port mapping.
  # drain_on_shutdown (drain_on_shutdown: nil) - Controls the behavior of the client when leave_on_interrupt or leave_on_terminate are set and the client receives the appropriate signal.
  # cgroup_parent (string: "/nomad") - Specifies the cgroup parent for which cgroup subsystems managed by Nomad will be mounted under. Currently this only applies to the cpuset subsystems. This field is ignored on non Linux platforms.
  # users (Users: nil) - Specifies options concerning Nomad client's use of operating system users.
}