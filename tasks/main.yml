---

- name: Ensure linux user nomad
  ansible.builtin.user: 
    name: "{{ nomad_user }}"
  tags: nomad

- name: Ensure /usr/local/bin/nomad
  ansible.builtin.unarchive:
    remote_src: yes
    src: "https://releases.hashicorp.com/nomad/{{ nomad_version }}/nomad_{{ nomad_version }}_linux_amd64.zip"
    dest: /usr/local/bin
    keep_newer: yes
    owner: "{{ nomad_user }}"
    group: "{{ nomad_group }}"
  tags: nomad

- name: Ensure nomad server systemd service configuration exists
  ansible.builtin.template:
    src: templates/nomad.service.j2
    dest: /etc/systemd/system/nomad.service
    mode: 0600
  when: nomad_node_role == 'server'
  notify: restart nomad
  tags: nomad

- name: Ensure nomad client systemd service configuration exists
  ansible.builtin.template:
    src: templates/nomad.client.service.j2
    dest: /etc/systemd/system/nomad.service
    mode: 0600
  when: nomad_node_role != 'server'
  notify: restart nomad
  tags: nomad

- name: reload daemon
  ansible.builtin.systemd:
    daemon_reload: yes
  tags: nomad

- name: Ensure {{ nomad_config_dir }}
  ansible.builtin.file:
    dest: "{{ nomad_config_dir }}"
    state: directory
    owner: "{{ nomad_user }}"
    group: "{{ nomad_group }}"
  tags: nomad

- name: Ensure {{ nomad_data_dir }}
  ansible.builtin.file:
    dest: "{{ nomad_data_dir }}"
    state: directory
    owner: "{{ nomad_user }}"
    group: "{{ nomad_group }}"
  tags: nomad

- name: Ensure {{ nomad_plugin_dir }}
  ansible.builtin.file:
    dest: "{{ nomad_plugin_dir }}"
    state: directory
    owner: "{{ nomad_user }}"
    group: "{{ nomad_group }}"
  when: nomad_node_role != 'server'
  tags: nomad

- name: Ensure nomad base configuration exists
  ansible.builtin.template:
    src: templates/base.hcl.j2
    dest: "{{ nomad_config_dir }}/base.hcl"
    owner: "{{ nomad_user }}"
    group: "{{ nomad_group }}"
    mode: 0600
  notify: restart nomad
  tags: nomad

- name: Ensure nomad server configuration exists
  ansible.builtin.template:
    src: templates/server.hcl.j2
    dest: "{{ nomad_config_dir }}/server.hcl"
    owner: "{{ nomad_user }}"
    group: "{{ nomad_group }}"
    mode: 0600
  when: nomad_node_role == 'server'
  notify: restart nomad
  tags: nomad

- name: Ensure nomad client configuration exists
  ansible.builtin.template:
    src: templates/client.hcl.j2
    dest: "{{ nomad_config_dir }}/client.hcl"
    owner: "{{ nomad_user }}"
    group: "{{ nomad_group }}"
    mode: 0600
  when: nomad_node_role != 'server'
  notify: restart nomad
  tags: nomad

- name: Ensure "{{ nomad_tls_dir }}"
  ansible.builtin.file:
    dest: "{{ nomad_tls_dir }}"
    state: directory
    owner: "{{ nomad_user }}"
    group: "{{ nomad_group }}"
  tags: nomad

- name: Copy CA certificate
  ansible.builtin.copy:
    src: "{{ nomad_tls_src_files }}/{{ nomad_ca_file | basename }}"
    dest: "{{ nomad_tls_dir }}/{{ nomad_ca_file }}"
    owner: "{{ nomad_user }}"
    group: "{{ nomad_group }}"
    mode: 0600
  notify: restart nomad
  tags: nomad

- name: Copy server certificate
  ansible.builtin.copy:
    src: "{{ nomad_tls_src_files }}/{{ nomad_server_cert_file | basename }}"
    dest: "{{ nomad_tls_dir }}/{{ nomad_server_cert_file }}"
    owner: "{{ nomad_user }}"
    group: "{{ nomad_group }}"
    mode: 0600
  when: nomad_node_role == 'server'
  notify: restart nomad
  tags: nomad

- name: Copy server key
  ansible.builtin.copy:
    src: "{{ nomad_tls_src_files }}/{{ nomad_server_key_file | basename }}"
    dest: "{{ nomad_tls_dir }}/{{ nomad_server_key_file }}"
    owner: "{{ nomad_user }}"
    group: "{{ nomad_group }}"
    mode: 0600
  when: nomad_node_role == 'server'
  notify: restart nomad
  tags: nomad

- name: Copy client certificate
  ansible.builtin.copy:
    src: "{{ nomad_tls_src_files }}/{{ nomad_client_cert_file | basename }}"
    dest: "{{ nomad_tls_dir }}/{{ nomad_client_cert_file }}"
    owner: "{{ nomad_user }}"
    group: "{{ nomad_group }}"
    mode: 0600
  when: nomad_node_role != 'server'
  notify: restart nomad
  tags: nomad

- name: Copy client key
  ansible.builtin.copy:
    src: "{{ nomad_tls_src_files }}/{{ nomad_client_key_file | basename }}"
    dest: "{{ nomad_tls_dir }}/{{ nomad_client_key_file }}"
    owner: "{{ nomad_user }}"
    group: "{{ nomad_group }}"
    mode: 0600
  when: nomad_node_role != 'server'
  notify: restart nomad
  tags: nomad

- name: Ensure nomad service is running (and enabled)
  ansible.builtin.service:
    name: nomad
    state: started
    enabled: yes
  tags: nomad

- name: Ensure /opt/cni/bin
  ansible.builtin.file:
    dest: /opt/cni/bin
    state: directory
  when: nomad_node_role != 'server'
  tags: nomad

- name: Ensure cni-plugins
  unarchive:
    src: "https://github.com/containernetworking/plugins/releases/download/v{{ nomad_cni_plugins_version }}/cni-plugins-linux-amd64-v{{ nomad_cni_plugins_version }}.tgz"
    dest: /opt/cni/bin
    remote_src: yes
    keep_newer: yes
  when: nomad_node_role != 'server'
  tags: nomad

...